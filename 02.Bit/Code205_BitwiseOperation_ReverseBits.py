#############################################################################
# 逆序二进制的状态
#   输入是一个长度为 32 的二进制字符串
#
# 测试链接 : https://leetcode.cn/problems/reverse-bits/
#############################################################################

# 方法一： 位运算分治
def ReverserBits1(n):
    n = ((n & 0xaaaaaaaa) >> 1) | ((n & 0x55555555) << 1)   
    n = ((n & 0xcccccccc) >> 2) | ((n & 0x33333333) << 2 )  
    n =((n & 0xf0f0f0f0) >> 4) | ((n & 0x0f0f0f0f) << 4)   
    n = ((n & 0xff00ff00) >> 8) | ((n & 0x00ff00ff) << 8 )    
    n =( (n & 0xffff0000) >> 16) | ((n & 0x0000ffff) << 16)   
    return n


#---------------------------------------------------------------------------------
# 方法二： 逐位颠倒

def ReverserBits2(n):
    res = 0
    for i in range(32):
        res |=  ((n>>i) & 1 ) << (31-i)
    return res


#---------------------------------------------------------------------------------

def main():   
    a = 0b11001001
    x1 = ReverserBits1(a)
    print(bin(x1))
    x2 = ReverserBits1(a)
    print(bin(x2))

if __name__ == "__main__":
    main()   